// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// ../ui/css/bootstrap.min.css
// ../ui/css/fontawesome.css
// ../ui/index.html
// ../ui/js/bootstrap.min.js
// ../ui/js/jquery-3.3.1.slim.min.js
// ../ui/js/popper.min.js
// ../ui/js/vue.js
// ../ui/js/vue.min.js
// ../ui/js/vue_dev.js
package cloudtables

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// uiCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func uiCssBootstrapMinCss() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/css/bootstrap.min.css"
	name := "ui/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiCssFontawesomeCss reads file data from disk. It returns an error on failure.
func uiCssFontawesomeCss() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/css/fontawesome.css"
	name := "ui/css/fontawesome.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiIndexHtml reads file data from disk. It returns an error on failure.
func uiIndexHtml() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/index.html"
	name := "ui/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func uiJsBootstrapMinJs() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/js/bootstrap.min.js"
	name := "ui/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiJsJquery331SlimMinJs reads file data from disk. It returns an error on failure.
func uiJsJquery331SlimMinJs() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/js/jquery-3.3.1.slim.min.js"
	name := "ui/js/jquery-3.3.1.slim.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiJsPopperMinJs reads file data from disk. It returns an error on failure.
func uiJsPopperMinJs() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/js/popper.min.js"
	name := "ui/js/popper.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiJsVueJs reads file data from disk. It returns an error on failure.
func uiJsVueJs() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/js/vue.js"
	name := "ui/js/vue.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiJsVueMinJs reads file data from disk. It returns an error on failure.
func uiJsVueMinJs() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/js/vue.min.js"
	name := "ui/js/vue.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// uiJsVue_devJs reads file data from disk. It returns an error on failure.
func uiJsVue_devJs() (*asset, error) {
	path := "/home/cory/go/src/github.com/corysm1th/cloudtables/ui/js/vue_dev.js"
	name := "ui/js/vue_dev.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/css/bootstrap.min.css": uiCssBootstrapMinCss,
	"ui/css/fontawesome.css": uiCssFontawesomeCss,
	"ui/index.html": uiIndexHtml,
	"ui/js/bootstrap.min.js": uiJsBootstrapMinJs,
	"ui/js/jquery-3.3.1.slim.min.js": uiJsJquery331SlimMinJs,
	"ui/js/popper.min.js": uiJsPopperMinJs,
	"ui/js/vue.js": uiJsVueJs,
	"ui/js/vue.min.js": uiJsVueMinJs,
	"ui/js/vue_dev.js": uiJsVue_devJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"bootstrap.min.css": &bintree{uiCssBootstrapMinCss, map[string]*bintree{}},
			"fontawesome.css": &bintree{uiCssFontawesomeCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{uiIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"bootstrap.min.js": &bintree{uiJsBootstrapMinJs, map[string]*bintree{}},
			"jquery-3.3.1.slim.min.js": &bintree{uiJsJquery331SlimMinJs, map[string]*bintree{}},
			"popper.min.js": &bintree{uiJsPopperMinJs, map[string]*bintree{}},
			"vue.js": &bintree{uiJsVueJs, map[string]*bintree{}},
			"vue.min.js": &bintree{uiJsVueMinJs, map[string]*bintree{}},
			"vue_dev.js": &bintree{uiJsVue_devJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

